  _______    ____    _____     ____        
 |__   __|  / __ \  |  __ \   / __ \     _ 
    | |    | |  | | | |  | | | |  | |   (_)
    | |    | |  | | | |  | | | |  | |      
    | |    | |__| | | |__| | | |__| |    _ 
    |_|     \____/  |_____/   \____/    (_)

P0:
- sheet validations
  - correctly named sheets, maybe columns
  - probably better to run some unit tests against the sheet
  - require validation when registering sheet
    - add BalanceSheet validation
- refactor out general AS lib
  - generate typescript types declaration:
    https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html
- update README

P1:
- unit tests
    - DescriptionContext class
    - test the Tester
- read all emails, and ask admin to verify emails that should be parsed
- Move client projects off of dev mode to versioned library
- More comments everywhere
- Only show 'See balance sheet' in email if at least link href is in Config
- Set the header rows of Balance Sheet and Config to be imported ranges from
  the template
  - might be a problem with merged ranges
- mark L tests and make running them optional
- tsconfig
- Allow inserting row at correct date in balance sheet using date passed in to
  insertRow()

P2:
- option to add partial payment
- use dropdown list to select payment types in sheet config
- allow disabling outgoing emails in the config
- Add config for the payment label in balance sheet. e.g. "Car payment"

P3:
- integrate with Plaid to *maybe* get Zelle Ids  
- automated way to unregister deleted clients

P4
- we get message date to use as transaction date. this date isn't always
  correct. in one example, email timestamp EST is day X at 2:43am, but
  message.getDate() is apparently day X-1


  _____     ____    _   _   ______     
 |  __ \   / __ \  | \ | | |  ____|  _ 
 | |  | | | |  | | |  \| | | |__    (_)
 | |  | | | |  | | | . ` | |  __|      
 | |__| | | |__| | | |\  | | |____   _ 
 |_____/   \____/  |_| \_| |______| (_)

P0:
- config.ts to parse the config sheet
- get date from email to add payment, instead of assuming today
- add loan/interest features
- generalize terminology in code and config
- put spreadsheetId in new LibContext (research life cycle)
- integrate into live sheets
- restructure triggers
  - only the lib has triggers
  - scripts that depend on the lib register
- fix afterAll and configtest
- For every 5 minute 'check labeled Emails', first check if there are any
    labeled emails, then open every spreadsheet.

P1:
- add option to add a full payment
- scheduled addition of rent due entry
- option to send thanks for your payment email
- parse email to input payments
- accommodate 0-interest loan
- Ensure email search ignores case
- Only make balace red in email for rent, not for loans
- implement unit test framework
- unit tests
    - setConfigForTest
    - see how costly it is to use a temp sheet for all test runs
        - beforeEach and afterEach are arrays of functions
- better trigger versioning
- Validate email address format

P2:
- instead of checking emails, let manual step be to label emails. script do the
  rest
- Add email display name to config for outgoing emails
- maybe manage triggers programatically?
  - https://developers.google.com/apps-script/reference/script/trigger-builder

P3:
- remove Zelle ID from balance row interface